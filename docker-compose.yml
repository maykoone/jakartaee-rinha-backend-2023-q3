version: '3.5'

services:
 
  db:
    image: postgres:15.4
    command: postgres -c 'synchronous_commit=off' -c 'shared_buffers=375MB' -c 'maintenance_work_mem=375MB' -c 'max_connections=31'
    restart: always
    environment:
      POSTGRES_PASSWORD: test
      POSTGRES_USER: test
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./import.sql:/docker-entrypoint-initdb.d/import.sql
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '1.2g'

  api1: # API - Instância 01
    image: maykoone/jakartaee-rinha-backend:test
    #command: --deploy /opt/payara/deployments/app.war --contextroot ROOT --nohazelcast --disablephonehome --maxhttpthreads 100 --minhttpthreads 100 --postbootcommandfile /opt/payara/payara-postbootcommand.txt
    hostname: api1
    environment:
      DB_SERVER_NAME: db
      MIN_HTTP_THREADS: 50
      MAX_HTTP_THREADS: 50
    depends_on:
      - db
    expose:
      - "8080"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/greeting || exit 1
      interval: 45s
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: '0.65g'

  api2: # API - Instância 02
    image: maykoone/jakartaee-rinha-backend:test
    #command: --deploy /opt/payara/deployments/app.war --contextroot ROOT --nohazelcast --disablephonehome --maxhttpthreads 3 --minhttpthreads 3 --postbootcommandfile /opt/payara/payara-postbootcommand.txt
    hostname: api2
    environment:
      DB_SERVER_NAME: db
      MIN_HTTP_THREADS: 3
      MAX_HTTP_THREADS: 3
    depends_on:
      - db
    expose:
      - "8080"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/greeting || exit 1
      interval: 45s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '0.65g'

  nginx: # Load Balancer
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      api1:
        condition: service_healthy
      api2:
        condition: service_healthy
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '0.5g'

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8085:8080
 
volumes:
  pgdata:
